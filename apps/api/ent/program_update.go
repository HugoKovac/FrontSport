// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/exercise"
	"GoNext/base/ent/predicate"
	"GoNext/base/ent/program"
	"GoNext/base/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProgramUpdate is the builder for updating Program entities.
type ProgramUpdate struct {
	config
	hooks    []Hook
	mutation *ProgramMutation
}

// Where appends a list predicates to the ProgramUpdate builder.
func (pu *ProgramUpdate) Where(ps ...predicate.Program) *ProgramUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProgramUpdate) SetUpdatedAt(t time.Time) *ProgramUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetName sets the "Name" field.
func (pu *ProgramUpdate) SetName(s string) *ProgramUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableName(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetUserID sets the "user_id" field.
func (pu *ProgramUpdate) SetUserID(u uuid.UUID) *ProgramUpdate {
	pu.mutation.SetUserID(u)
	return pu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableUserID(u *uuid.UUID) *ProgramUpdate {
	if u != nil {
		pu.SetUserID(*u)
	}
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProgramUpdate) SetUser(u *User) *ProgramUpdate {
	return pu.SetUserID(u.ID)
}

// AddExerciseIDs adds the "exercises" edge to the Exercise entity by IDs.
func (pu *ProgramUpdate) AddExerciseIDs(ids ...int) *ProgramUpdate {
	pu.mutation.AddExerciseIDs(ids...)
	return pu
}

// AddExercises adds the "exercises" edges to the Exercise entity.
func (pu *ProgramUpdate) AddExercises(e ...*Exercise) *ProgramUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddExerciseIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (pu *ProgramUpdate) Mutation() *ProgramMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProgramUpdate) ClearUser() *ProgramUpdate {
	pu.mutation.ClearUser()
	return pu
}

// ClearExercises clears all "exercises" edges to the Exercise entity.
func (pu *ProgramUpdate) ClearExercises() *ProgramUpdate {
	pu.mutation.ClearExercises()
	return pu
}

// RemoveExerciseIDs removes the "exercises" edge to Exercise entities by IDs.
func (pu *ProgramUpdate) RemoveExerciseIDs(ids ...int) *ProgramUpdate {
	pu.mutation.RemoveExerciseIDs(ids...)
	return pu
}

// RemoveExercises removes "exercises" edges to Exercise entities.
func (pu *ProgramUpdate) RemoveExercises(e ...*Exercise) *ProgramUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveExerciseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProgramUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProgramUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProgramUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProgramUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := program.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProgramUpdate) check() error {
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Program.user"`)
	}
	return nil
}

func (pu *ProgramUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeString, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UserTable,
			Columns: []string{program.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UserTable,
			Columns: []string{program.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedExercisesIDs(); len(nodes) > 0 && !pu.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProgramUpdateOne is the builder for updating a single Program entity.
type ProgramUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProgramMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProgramUpdateOne) SetUpdatedAt(t time.Time) *ProgramUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetName sets the "Name" field.
func (puo *ProgramUpdateOne) SetName(s string) *ProgramUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableName(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetUserID sets the "user_id" field.
func (puo *ProgramUpdateOne) SetUserID(u uuid.UUID) *ProgramUpdateOne {
	puo.mutation.SetUserID(u)
	return puo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableUserID(u *uuid.UUID) *ProgramUpdateOne {
	if u != nil {
		puo.SetUserID(*u)
	}
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProgramUpdateOne) SetUser(u *User) *ProgramUpdateOne {
	return puo.SetUserID(u.ID)
}

// AddExerciseIDs adds the "exercises" edge to the Exercise entity by IDs.
func (puo *ProgramUpdateOne) AddExerciseIDs(ids ...int) *ProgramUpdateOne {
	puo.mutation.AddExerciseIDs(ids...)
	return puo
}

// AddExercises adds the "exercises" edges to the Exercise entity.
func (puo *ProgramUpdateOne) AddExercises(e ...*Exercise) *ProgramUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddExerciseIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (puo *ProgramUpdateOne) Mutation() *ProgramMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProgramUpdateOne) ClearUser() *ProgramUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// ClearExercises clears all "exercises" edges to the Exercise entity.
func (puo *ProgramUpdateOne) ClearExercises() *ProgramUpdateOne {
	puo.mutation.ClearExercises()
	return puo
}

// RemoveExerciseIDs removes the "exercises" edge to Exercise entities by IDs.
func (puo *ProgramUpdateOne) RemoveExerciseIDs(ids ...int) *ProgramUpdateOne {
	puo.mutation.RemoveExerciseIDs(ids...)
	return puo
}

// RemoveExercises removes "exercises" edges to Exercise entities.
func (puo *ProgramUpdateOne) RemoveExercises(e ...*Exercise) *ProgramUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveExerciseIDs(ids...)
}

// Where appends a list predicates to the ProgramUpdate builder.
func (puo *ProgramUpdateOne) Where(ps ...predicate.Program) *ProgramUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProgramUpdateOne) Select(field string, fields ...string) *ProgramUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Program entity.
func (puo *ProgramUpdateOne) Save(ctx context.Context) (*Program, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProgramUpdateOne) SaveX(ctx context.Context) *Program {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProgramUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProgramUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := program.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProgramUpdateOne) check() error {
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Program.user"`)
	}
	return nil
}

func (puo *ProgramUpdateOne) sqlSave(ctx context.Context) (_node *Program, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Program.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, program.FieldID)
		for _, f := range fields {
			if !program.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != program.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeString, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UserTable,
			Columns: []string{program.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.UserTable,
			Columns: []string{program.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedExercisesIDs(); len(nodes) > 0 && !puo.mutation.ExercisesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ExercisesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   program.ExercisesTable,
			Columns: []string{program.ExercisesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Program{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
