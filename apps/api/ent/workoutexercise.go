// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/exercise"
	"GoNext/base/ent/workout"
	"GoNext/base/ent/workoutexercise"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkoutExercise is the model entity for the WorkoutExercise schema.
type WorkoutExercise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ExerciseID holds the value of the "exercise_id" field.
	ExerciseID int `json:"exercise_id,omitempty"`
	// WorkoutID holds the value of the "workout_id" field.
	WorkoutID uuid.UUID `json:"workout_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutExerciseQuery when eager-loading is set.
	Edges        WorkoutExerciseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkoutExerciseEdges holds the relations/edges for other nodes in the graph.
type WorkoutExerciseEdges struct {
	// Workout holds the value of the workout edge.
	Workout *Workout `json:"workout,omitempty"`
	// Exercise holds the value of the exercise edge.
	Exercise *Exercise `json:"exercise,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkoutOrErr returns the Workout value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseEdges) WorkoutOrErr() (*Workout, error) {
	if e.Workout != nil {
		return e.Workout, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workout.Label}
	}
	return nil, &NotLoadedError{edge: "workout"}
}

// ExerciseOrErr returns the Exercise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseEdges) ExerciseOrErr() (*Exercise, error) {
	if e.Exercise != nil {
		return e.Exercise, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: exercise.Label}
	}
	return nil, &NotLoadedError{edge: "exercise"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutExercise) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutexercise.FieldID, workoutexercise.FieldExerciseID:
			values[i] = new(sql.NullInt64)
		case workoutexercise.FieldWorkoutID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutExercise fields.
func (we *WorkoutExercise) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutexercise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			we.ID = int(value.Int64)
		case workoutexercise.FieldExerciseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exercise_id", values[i])
			} else if value.Valid {
				we.ExerciseID = int(value.Int64)
			}
		case workoutexercise.FieldWorkoutID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workout_id", values[i])
			} else if value != nil {
				we.WorkoutID = *value
			}
		default:
			we.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutExercise.
// This includes values selected through modifiers, order, etc.
func (we *WorkoutExercise) Value(name string) (ent.Value, error) {
	return we.selectValues.Get(name)
}

// QueryWorkout queries the "workout" edge of the WorkoutExercise entity.
func (we *WorkoutExercise) QueryWorkout() *WorkoutQuery {
	return NewWorkoutExerciseClient(we.config).QueryWorkout(we)
}

// QueryExercise queries the "exercise" edge of the WorkoutExercise entity.
func (we *WorkoutExercise) QueryExercise() *ExerciseQuery {
	return NewWorkoutExerciseClient(we.config).QueryExercise(we)
}

// Update returns a builder for updating this WorkoutExercise.
// Note that you need to call WorkoutExercise.Unwrap() before calling this method if this WorkoutExercise
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkoutExercise) Update() *WorkoutExerciseUpdateOne {
	return NewWorkoutExerciseClient(we.config).UpdateOne(we)
}

// Unwrap unwraps the WorkoutExercise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkoutExercise) Unwrap() *WorkoutExercise {
	_tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutExercise is not a transactional entity")
	}
	we.config.driver = _tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkoutExercise) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutExercise(")
	builder.WriteString(fmt.Sprintf("id=%v, ", we.ID))
	builder.WriteString("exercise_id=")
	builder.WriteString(fmt.Sprintf("%v", we.ExerciseID))
	builder.WriteString(", ")
	builder.WriteString("workout_id=")
	builder.WriteString(fmt.Sprintf("%v", we.WorkoutID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutExercises is a parsable slice of WorkoutExercise.
type WorkoutExercises []*WorkoutExercise
