// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/exercise"
	"GoNext/base/ent/predicate"
	"GoNext/base/ent/workout"
	"GoNext/base/ent/workoutexercise"
	"GoNext/base/ent/workoutexerciseset"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutExerciseUpdate is the builder for updating WorkoutExercise entities.
type WorkoutExerciseUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutExerciseMutation
}

// Where appends a list predicates to the WorkoutExerciseUpdate builder.
func (weu *WorkoutExerciseUpdate) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseUpdate {
	weu.mutation.Where(ps...)
	return weu
}

// SetExerciseID sets the "exercise_id" field.
func (weu *WorkoutExerciseUpdate) SetExerciseID(i int) *WorkoutExerciseUpdate {
	weu.mutation.SetExerciseID(i)
	return weu
}

// SetNillableExerciseID sets the "exercise_id" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableExerciseID(i *int) *WorkoutExerciseUpdate {
	if i != nil {
		weu.SetExerciseID(*i)
	}
	return weu
}

// SetWorkoutID sets the "workout_id" field.
func (weu *WorkoutExerciseUpdate) SetWorkoutID(u uuid.UUID) *WorkoutExerciseUpdate {
	weu.mutation.SetWorkoutID(u)
	return weu
}

// SetNillableWorkoutID sets the "workout_id" field if the given value is not nil.
func (weu *WorkoutExerciseUpdate) SetNillableWorkoutID(u *uuid.UUID) *WorkoutExerciseUpdate {
	if u != nil {
		weu.SetWorkoutID(*u)
	}
	return weu
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (weu *WorkoutExerciseUpdate) SetWorkout(w *Workout) *WorkoutExerciseUpdate {
	return weu.SetWorkoutID(w.ID)
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (weu *WorkoutExerciseUpdate) SetExercise(e *Exercise) *WorkoutExerciseUpdate {
	return weu.SetExerciseID(e.ID)
}

// AddSetIDs adds the "sets" edge to the WorkoutExerciseSet entity by IDs.
func (weu *WorkoutExerciseUpdate) AddSetIDs(ids ...uuid.UUID) *WorkoutExerciseUpdate {
	weu.mutation.AddSetIDs(ids...)
	return weu
}

// AddSets adds the "sets" edges to the WorkoutExerciseSet entity.
func (weu *WorkoutExerciseUpdate) AddSets(w ...*WorkoutExerciseSet) *WorkoutExerciseUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.AddSetIDs(ids...)
}

// Mutation returns the WorkoutExerciseMutation object of the builder.
func (weu *WorkoutExerciseUpdate) Mutation() *WorkoutExerciseMutation {
	return weu.mutation
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (weu *WorkoutExerciseUpdate) ClearWorkout() *WorkoutExerciseUpdate {
	weu.mutation.ClearWorkout()
	return weu
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (weu *WorkoutExerciseUpdate) ClearExercise() *WorkoutExerciseUpdate {
	weu.mutation.ClearExercise()
	return weu
}

// ClearSets clears all "sets" edges to the WorkoutExerciseSet entity.
func (weu *WorkoutExerciseUpdate) ClearSets() *WorkoutExerciseUpdate {
	weu.mutation.ClearSets()
	return weu
}

// RemoveSetIDs removes the "sets" edge to WorkoutExerciseSet entities by IDs.
func (weu *WorkoutExerciseUpdate) RemoveSetIDs(ids ...uuid.UUID) *WorkoutExerciseUpdate {
	weu.mutation.RemoveSetIDs(ids...)
	return weu
}

// RemoveSets removes "sets" edges to WorkoutExerciseSet entities.
func (weu *WorkoutExerciseUpdate) RemoveSets(w ...*WorkoutExerciseSet) *WorkoutExerciseUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weu.RemoveSetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (weu *WorkoutExerciseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, weu.sqlSave, weu.mutation, weu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weu *WorkoutExerciseUpdate) SaveX(ctx context.Context) int {
	affected, err := weu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (weu *WorkoutExerciseUpdate) Exec(ctx context.Context) error {
	_, err := weu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weu *WorkoutExerciseUpdate) ExecX(ctx context.Context) {
	if err := weu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weu *WorkoutExerciseUpdate) check() error {
	if weu.mutation.WorkoutCleared() && len(weu.mutation.WorkoutIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.workout"`)
	}
	if weu.mutation.ExerciseCleared() && len(weu.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.exercise"`)
	}
	return nil
}

func (weu *WorkoutExerciseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := weu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutexercise.Table, workoutexercise.Columns, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt))
	if ps := weu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if weu.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.WorkoutTable,
			Columns: []string{workoutexercise.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.WorkoutTable,
			Columns: []string{workoutexercise.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.ExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseTable,
			Columns: []string{workoutexercise.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseTable,
			Columns: []string{workoutexercise.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weu.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.RemovedSetsIDs(); len(nodes) > 0 && !weu.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weu.mutation.SetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, weu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	weu.mutation.done = true
	return n, nil
}

// WorkoutExerciseUpdateOne is the builder for updating a single WorkoutExercise entity.
type WorkoutExerciseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutExerciseMutation
}

// SetExerciseID sets the "exercise_id" field.
func (weuo *WorkoutExerciseUpdateOne) SetExerciseID(i int) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetExerciseID(i)
	return weuo
}

// SetNillableExerciseID sets the "exercise_id" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableExerciseID(i *int) *WorkoutExerciseUpdateOne {
	if i != nil {
		weuo.SetExerciseID(*i)
	}
	return weuo
}

// SetWorkoutID sets the "workout_id" field.
func (weuo *WorkoutExerciseUpdateOne) SetWorkoutID(u uuid.UUID) *WorkoutExerciseUpdateOne {
	weuo.mutation.SetWorkoutID(u)
	return weuo
}

// SetNillableWorkoutID sets the "workout_id" field if the given value is not nil.
func (weuo *WorkoutExerciseUpdateOne) SetNillableWorkoutID(u *uuid.UUID) *WorkoutExerciseUpdateOne {
	if u != nil {
		weuo.SetWorkoutID(*u)
	}
	return weuo
}

// SetWorkout sets the "workout" edge to the Workout entity.
func (weuo *WorkoutExerciseUpdateOne) SetWorkout(w *Workout) *WorkoutExerciseUpdateOne {
	return weuo.SetWorkoutID(w.ID)
}

// SetExercise sets the "exercise" edge to the Exercise entity.
func (weuo *WorkoutExerciseUpdateOne) SetExercise(e *Exercise) *WorkoutExerciseUpdateOne {
	return weuo.SetExerciseID(e.ID)
}

// AddSetIDs adds the "sets" edge to the WorkoutExerciseSet entity by IDs.
func (weuo *WorkoutExerciseUpdateOne) AddSetIDs(ids ...uuid.UUID) *WorkoutExerciseUpdateOne {
	weuo.mutation.AddSetIDs(ids...)
	return weuo
}

// AddSets adds the "sets" edges to the WorkoutExerciseSet entity.
func (weuo *WorkoutExerciseUpdateOne) AddSets(w ...*WorkoutExerciseSet) *WorkoutExerciseUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.AddSetIDs(ids...)
}

// Mutation returns the WorkoutExerciseMutation object of the builder.
func (weuo *WorkoutExerciseUpdateOne) Mutation() *WorkoutExerciseMutation {
	return weuo.mutation
}

// ClearWorkout clears the "workout" edge to the Workout entity.
func (weuo *WorkoutExerciseUpdateOne) ClearWorkout() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearWorkout()
	return weuo
}

// ClearExercise clears the "exercise" edge to the Exercise entity.
func (weuo *WorkoutExerciseUpdateOne) ClearExercise() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearExercise()
	return weuo
}

// ClearSets clears all "sets" edges to the WorkoutExerciseSet entity.
func (weuo *WorkoutExerciseUpdateOne) ClearSets() *WorkoutExerciseUpdateOne {
	weuo.mutation.ClearSets()
	return weuo
}

// RemoveSetIDs removes the "sets" edge to WorkoutExerciseSet entities by IDs.
func (weuo *WorkoutExerciseUpdateOne) RemoveSetIDs(ids ...uuid.UUID) *WorkoutExerciseUpdateOne {
	weuo.mutation.RemoveSetIDs(ids...)
	return weuo
}

// RemoveSets removes "sets" edges to WorkoutExerciseSet entities.
func (weuo *WorkoutExerciseUpdateOne) RemoveSets(w ...*WorkoutExerciseSet) *WorkoutExerciseUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return weuo.RemoveSetIDs(ids...)
}

// Where appends a list predicates to the WorkoutExerciseUpdate builder.
func (weuo *WorkoutExerciseUpdateOne) Where(ps ...predicate.WorkoutExercise) *WorkoutExerciseUpdateOne {
	weuo.mutation.Where(ps...)
	return weuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (weuo *WorkoutExerciseUpdateOne) Select(field string, fields ...string) *WorkoutExerciseUpdateOne {
	weuo.fields = append([]string{field}, fields...)
	return weuo
}

// Save executes the query and returns the updated WorkoutExercise entity.
func (weuo *WorkoutExerciseUpdateOne) Save(ctx context.Context) (*WorkoutExercise, error) {
	return withHooks(ctx, weuo.sqlSave, weuo.mutation, weuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (weuo *WorkoutExerciseUpdateOne) SaveX(ctx context.Context) *WorkoutExercise {
	node, err := weuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (weuo *WorkoutExerciseUpdateOne) Exec(ctx context.Context) error {
	_, err := weuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (weuo *WorkoutExerciseUpdateOne) ExecX(ctx context.Context) {
	if err := weuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (weuo *WorkoutExerciseUpdateOne) check() error {
	if weuo.mutation.WorkoutCleared() && len(weuo.mutation.WorkoutIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.workout"`)
	}
	if weuo.mutation.ExerciseCleared() && len(weuo.mutation.ExerciseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkoutExercise.exercise"`)
	}
	return nil
}

func (weuo *WorkoutExerciseUpdateOne) sqlSave(ctx context.Context) (_node *WorkoutExercise, err error) {
	if err := weuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workoutexercise.Table, workoutexercise.Columns, sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt))
	id, ok := weuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkoutExercise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := weuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutexercise.FieldID)
		for _, f := range fields {
			if !workoutexercise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoutexercise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := weuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if weuo.mutation.WorkoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.WorkoutTable,
			Columns: []string{workoutexercise.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.WorkoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.WorkoutTable,
			Columns: []string{workoutexercise.WorkoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workout.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.ExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseTable,
			Columns: []string{workoutexercise.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.ExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexercise.ExerciseTable,
			Columns: []string{workoutexercise.ExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if weuo.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.RemovedSetsIDs(); len(nodes) > 0 && !weuo.mutation.SetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := weuo.mutation.SetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workoutexercise.SetsTable,
			Columns: []string{workoutexercise.SetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkoutExercise{config: weuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, weuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexercise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	weuo.mutation.done = true
	return _node, nil
}
