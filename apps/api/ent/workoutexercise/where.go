// Code generated by ent, DO NOT EDIT.

package workoutexercise

import (
	"GoNext/base/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldLTE(FieldID, id))
}

// ExerciseID applies equality check predicate on the "exercise_id" field. It's identical to ExerciseIDEQ.
func ExerciseID(v int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseID, v))
}

// WorkoutID applies equality check predicate on the "workout_id" field. It's identical to WorkoutIDEQ.
func WorkoutID(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWorkoutID, v))
}

// ExerciseIDEQ applies the EQ predicate on the "exercise_id" field.
func ExerciseIDEQ(v int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldExerciseID, v))
}

// ExerciseIDNEQ applies the NEQ predicate on the "exercise_id" field.
func ExerciseIDNEQ(v int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldExerciseID, v))
}

// ExerciseIDIn applies the In predicate on the "exercise_id" field.
func ExerciseIDIn(vs ...int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldExerciseID, vs...))
}

// ExerciseIDNotIn applies the NotIn predicate on the "exercise_id" field.
func ExerciseIDNotIn(vs ...int) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldExerciseID, vs...))
}

// WorkoutIDEQ applies the EQ predicate on the "workout_id" field.
func WorkoutIDEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldEQ(FieldWorkoutID, v))
}

// WorkoutIDNEQ applies the NEQ predicate on the "workout_id" field.
func WorkoutIDNEQ(v uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNEQ(FieldWorkoutID, v))
}

// WorkoutIDIn applies the In predicate on the "workout_id" field.
func WorkoutIDIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldIn(FieldWorkoutID, vs...))
}

// WorkoutIDNotIn applies the NotIn predicate on the "workout_id" field.
func WorkoutIDNotIn(vs ...uuid.UUID) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.FieldNotIn(FieldWorkoutID, vs...))
}

// HasWorkout applies the HasEdge predicate on the "workout" edge.
func HasWorkout() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkoutTable, WorkoutColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkoutWith applies the HasEdge predicate on the "workout" edge with a given conditions (other predicates).
func HasWorkoutWith(preds ...predicate.Workout) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(func(s *sql.Selector) {
		step := newWorkoutStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExercise applies the HasEdge predicate on the "exercise" edge.
func HasExercise() predicate.WorkoutExercise {
	return predicate.WorkoutExercise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExerciseTable, ExerciseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExerciseWith applies the HasEdge predicate on the "exercise" edge with a given conditions (other predicates).
func HasExerciseWith(preds ...predicate.Exercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(func(s *sql.Selector) {
		step := newExerciseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkoutExercise) predicate.WorkoutExercise {
	return predicate.WorkoutExercise(sql.NotPredicates(p))
}
