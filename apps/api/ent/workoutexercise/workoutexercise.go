// Code generated by ent, DO NOT EDIT.

package workoutexercise

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutexercise type in the database.
	Label = "workout_exercise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExerciseID holds the string denoting the exercise_id field in the database.
	FieldExerciseID = "exercise_id"
	// FieldWorkoutID holds the string denoting the workout_id field in the database.
	FieldWorkoutID = "workout_id"
	// EdgeWorkout holds the string denoting the workout edge name in mutations.
	EdgeWorkout = "workout"
	// EdgeExercise holds the string denoting the exercise edge name in mutations.
	EdgeExercise = "exercise"
	// Table holds the table name of the workoutexercise in the database.
	Table = "workout_exercises"
	// WorkoutTable is the table that holds the workout relation/edge.
	WorkoutTable = "workout_exercises"
	// WorkoutInverseTable is the table name for the Workout entity.
	// It exists in this package in order to avoid circular dependency with the "workout" package.
	WorkoutInverseTable = "workouts"
	// WorkoutColumn is the table column denoting the workout relation/edge.
	WorkoutColumn = "workout_id"
	// ExerciseTable is the table that holds the exercise relation/edge.
	ExerciseTable = "workout_exercises"
	// ExerciseInverseTable is the table name for the Exercise entity.
	// It exists in this package in order to avoid circular dependency with the "exercise" package.
	ExerciseInverseTable = "exercises"
	// ExerciseColumn is the table column denoting the exercise relation/edge.
	ExerciseColumn = "exercise_id"
)

// Columns holds all SQL columns for workoutexercise fields.
var Columns = []string{
	FieldID,
	FieldExerciseID,
	FieldWorkoutID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultWorkoutID holds the default value on creation for the "workout_id" field.
	DefaultWorkoutID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutExercise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExerciseID orders the results by the exercise_id field.
func ByExerciseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExerciseID, opts...).ToFunc()
}

// ByWorkoutID orders the results by the workout_id field.
func ByWorkoutID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkoutID, opts...).ToFunc()
}

// ByWorkoutField orders the results by workout field.
func ByWorkoutField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutStep(), sql.OrderByField(field, opts...))
	}
}

// ByExerciseField orders the results by exercise field.
func ByExerciseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExerciseStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkoutStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkoutTable, WorkoutColumn),
	)
}
func newExerciseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExerciseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExerciseTable, ExerciseColumn),
	)
}
