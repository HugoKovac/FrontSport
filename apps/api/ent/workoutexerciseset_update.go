// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/predicate"
	"GoNext/base/ent/workoutexercise"
	"GoNext/base/ent/workoutexerciseset"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkoutExerciseSetUpdate is the builder for updating WorkoutExerciseSet entities.
type WorkoutExerciseSetUpdate struct {
	config
	hooks    []Hook
	mutation *WorkoutExerciseSetMutation
}

// Where appends a list predicates to the WorkoutExerciseSetUpdate builder.
func (wesu *WorkoutExerciseSetUpdate) Where(ps ...predicate.WorkoutExerciseSet) *WorkoutExerciseSetUpdate {
	wesu.mutation.Where(ps...)
	return wesu
}

// SetUpdatedAt sets the "updated_at" field.
func (wesu *WorkoutExerciseSetUpdate) SetUpdatedAt(t time.Time) *WorkoutExerciseSetUpdate {
	wesu.mutation.SetUpdatedAt(t)
	return wesu
}

// SetWeight sets the "weight" field.
func (wesu *WorkoutExerciseSetUpdate) SetWeight(i int) *WorkoutExerciseSetUpdate {
	wesu.mutation.ResetWeight()
	wesu.mutation.SetWeight(i)
	return wesu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (wesu *WorkoutExerciseSetUpdate) SetNillableWeight(i *int) *WorkoutExerciseSetUpdate {
	if i != nil {
		wesu.SetWeight(*i)
	}
	return wesu
}

// AddWeight adds i to the "weight" field.
func (wesu *WorkoutExerciseSetUpdate) AddWeight(i int) *WorkoutExerciseSetUpdate {
	wesu.mutation.AddWeight(i)
	return wesu
}

// SetReps sets the "reps" field.
func (wesu *WorkoutExerciseSetUpdate) SetReps(i int) *WorkoutExerciseSetUpdate {
	wesu.mutation.ResetReps()
	wesu.mutation.SetReps(i)
	return wesu
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (wesu *WorkoutExerciseSetUpdate) SetNillableReps(i *int) *WorkoutExerciseSetUpdate {
	if i != nil {
		wesu.SetReps(*i)
	}
	return wesu
}

// AddReps adds i to the "reps" field.
func (wesu *WorkoutExerciseSetUpdate) AddReps(i int) *WorkoutExerciseSetUpdate {
	wesu.mutation.AddReps(i)
	return wesu
}

// SetWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID.
func (wesu *WorkoutExerciseSetUpdate) SetWorkoutExerciseID(id int) *WorkoutExerciseSetUpdate {
	wesu.mutation.SetWorkoutExerciseID(id)
	return wesu
}

// SetNillableWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID if the given value is not nil.
func (wesu *WorkoutExerciseSetUpdate) SetNillableWorkoutExerciseID(id *int) *WorkoutExerciseSetUpdate {
	if id != nil {
		wesu = wesu.SetWorkoutExerciseID(*id)
	}
	return wesu
}

// SetWorkoutExercise sets the "workout_exercise" edge to the WorkoutExercise entity.
func (wesu *WorkoutExerciseSetUpdate) SetWorkoutExercise(w *WorkoutExercise) *WorkoutExerciseSetUpdate {
	return wesu.SetWorkoutExerciseID(w.ID)
}

// Mutation returns the WorkoutExerciseSetMutation object of the builder.
func (wesu *WorkoutExerciseSetUpdate) Mutation() *WorkoutExerciseSetMutation {
	return wesu.mutation
}

// ClearWorkoutExercise clears the "workout_exercise" edge to the WorkoutExercise entity.
func (wesu *WorkoutExerciseSetUpdate) ClearWorkoutExercise() *WorkoutExerciseSetUpdate {
	wesu.mutation.ClearWorkoutExercise()
	return wesu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wesu *WorkoutExerciseSetUpdate) Save(ctx context.Context) (int, error) {
	wesu.defaults()
	return withHooks(ctx, wesu.sqlSave, wesu.mutation, wesu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wesu *WorkoutExerciseSetUpdate) SaveX(ctx context.Context) int {
	affected, err := wesu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wesu *WorkoutExerciseSetUpdate) Exec(ctx context.Context) error {
	_, err := wesu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wesu *WorkoutExerciseSetUpdate) ExecX(ctx context.Context) {
	if err := wesu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wesu *WorkoutExerciseSetUpdate) defaults() {
	if _, ok := wesu.mutation.UpdatedAt(); !ok {
		v := workoutexerciseset.UpdateDefaultUpdatedAt()
		wesu.mutation.SetUpdatedAt(v)
	}
}

func (wesu *WorkoutExerciseSetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoutexerciseset.Table, workoutexerciseset.Columns, sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID))
	if ps := wesu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wesu.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexerciseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wesu.mutation.Weight(); ok {
		_spec.SetField(workoutexerciseset.FieldWeight, field.TypeInt, value)
	}
	if value, ok := wesu.mutation.AddedWeight(); ok {
		_spec.AddField(workoutexerciseset.FieldWeight, field.TypeInt, value)
	}
	if value, ok := wesu.mutation.Reps(); ok {
		_spec.SetField(workoutexerciseset.FieldReps, field.TypeInt, value)
	}
	if value, ok := wesu.mutation.AddedReps(); ok {
		_spec.AddField(workoutexerciseset.FieldReps, field.TypeInt, value)
	}
	if wesu.mutation.WorkoutExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexerciseset.WorkoutExerciseTable,
			Columns: []string{workoutexerciseset.WorkoutExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wesu.mutation.WorkoutExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexerciseset.WorkoutExerciseTable,
			Columns: []string{workoutexerciseset.WorkoutExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wesu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexerciseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wesu.mutation.done = true
	return n, nil
}

// WorkoutExerciseSetUpdateOne is the builder for updating a single WorkoutExerciseSet entity.
type WorkoutExerciseSetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkoutExerciseSetMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (wesuo *WorkoutExerciseSetUpdateOne) SetUpdatedAt(t time.Time) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.SetUpdatedAt(t)
	return wesuo
}

// SetWeight sets the "weight" field.
func (wesuo *WorkoutExerciseSetUpdateOne) SetWeight(i int) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.ResetWeight()
	wesuo.mutation.SetWeight(i)
	return wesuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (wesuo *WorkoutExerciseSetUpdateOne) SetNillableWeight(i *int) *WorkoutExerciseSetUpdateOne {
	if i != nil {
		wesuo.SetWeight(*i)
	}
	return wesuo
}

// AddWeight adds i to the "weight" field.
func (wesuo *WorkoutExerciseSetUpdateOne) AddWeight(i int) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.AddWeight(i)
	return wesuo
}

// SetReps sets the "reps" field.
func (wesuo *WorkoutExerciseSetUpdateOne) SetReps(i int) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.ResetReps()
	wesuo.mutation.SetReps(i)
	return wesuo
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (wesuo *WorkoutExerciseSetUpdateOne) SetNillableReps(i *int) *WorkoutExerciseSetUpdateOne {
	if i != nil {
		wesuo.SetReps(*i)
	}
	return wesuo
}

// AddReps adds i to the "reps" field.
func (wesuo *WorkoutExerciseSetUpdateOne) AddReps(i int) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.AddReps(i)
	return wesuo
}

// SetWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID.
func (wesuo *WorkoutExerciseSetUpdateOne) SetWorkoutExerciseID(id int) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.SetWorkoutExerciseID(id)
	return wesuo
}

// SetNillableWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID if the given value is not nil.
func (wesuo *WorkoutExerciseSetUpdateOne) SetNillableWorkoutExerciseID(id *int) *WorkoutExerciseSetUpdateOne {
	if id != nil {
		wesuo = wesuo.SetWorkoutExerciseID(*id)
	}
	return wesuo
}

// SetWorkoutExercise sets the "workout_exercise" edge to the WorkoutExercise entity.
func (wesuo *WorkoutExerciseSetUpdateOne) SetWorkoutExercise(w *WorkoutExercise) *WorkoutExerciseSetUpdateOne {
	return wesuo.SetWorkoutExerciseID(w.ID)
}

// Mutation returns the WorkoutExerciseSetMutation object of the builder.
func (wesuo *WorkoutExerciseSetUpdateOne) Mutation() *WorkoutExerciseSetMutation {
	return wesuo.mutation
}

// ClearWorkoutExercise clears the "workout_exercise" edge to the WorkoutExercise entity.
func (wesuo *WorkoutExerciseSetUpdateOne) ClearWorkoutExercise() *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.ClearWorkoutExercise()
	return wesuo
}

// Where appends a list predicates to the WorkoutExerciseSetUpdate builder.
func (wesuo *WorkoutExerciseSetUpdateOne) Where(ps ...predicate.WorkoutExerciseSet) *WorkoutExerciseSetUpdateOne {
	wesuo.mutation.Where(ps...)
	return wesuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wesuo *WorkoutExerciseSetUpdateOne) Select(field string, fields ...string) *WorkoutExerciseSetUpdateOne {
	wesuo.fields = append([]string{field}, fields...)
	return wesuo
}

// Save executes the query and returns the updated WorkoutExerciseSet entity.
func (wesuo *WorkoutExerciseSetUpdateOne) Save(ctx context.Context) (*WorkoutExerciseSet, error) {
	wesuo.defaults()
	return withHooks(ctx, wesuo.sqlSave, wesuo.mutation, wesuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wesuo *WorkoutExerciseSetUpdateOne) SaveX(ctx context.Context) *WorkoutExerciseSet {
	node, err := wesuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wesuo *WorkoutExerciseSetUpdateOne) Exec(ctx context.Context) error {
	_, err := wesuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wesuo *WorkoutExerciseSetUpdateOne) ExecX(ctx context.Context) {
	if err := wesuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wesuo *WorkoutExerciseSetUpdateOne) defaults() {
	if _, ok := wesuo.mutation.UpdatedAt(); !ok {
		v := workoutexerciseset.UpdateDefaultUpdatedAt()
		wesuo.mutation.SetUpdatedAt(v)
	}
}

func (wesuo *WorkoutExerciseSetUpdateOne) sqlSave(ctx context.Context) (_node *WorkoutExerciseSet, err error) {
	_spec := sqlgraph.NewUpdateSpec(workoutexerciseset.Table, workoutexerciseset.Columns, sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID))
	id, ok := wesuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkoutExerciseSet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wesuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutexerciseset.FieldID)
		for _, f := range fields {
			if !workoutexerciseset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workoutexerciseset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wesuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wesuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexerciseset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wesuo.mutation.Weight(); ok {
		_spec.SetField(workoutexerciseset.FieldWeight, field.TypeInt, value)
	}
	if value, ok := wesuo.mutation.AddedWeight(); ok {
		_spec.AddField(workoutexerciseset.FieldWeight, field.TypeInt, value)
	}
	if value, ok := wesuo.mutation.Reps(); ok {
		_spec.SetField(workoutexerciseset.FieldReps, field.TypeInt, value)
	}
	if value, ok := wesuo.mutation.AddedReps(); ok {
		_spec.AddField(workoutexerciseset.FieldReps, field.TypeInt, value)
	}
	if wesuo.mutation.WorkoutExerciseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexerciseset.WorkoutExerciseTable,
			Columns: []string{workoutexerciseset.WorkoutExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wesuo.mutation.WorkoutExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexerciseset.WorkoutExerciseTable,
			Columns: []string{workoutexerciseset.WorkoutExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkoutExerciseSet{config: wesuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wesuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workoutexerciseset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wesuo.mutation.done = true
	return _node, nil
}
