// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/workoutexercise"
	"GoNext/base/ent/workoutexerciseset"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkoutExerciseSet is the model entity for the WorkoutExerciseSet schema.
type WorkoutExerciseSet struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// Reps holds the value of the "reps" field.
	Reps int `json:"reps,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkoutExerciseSetQuery when eager-loading is set.
	Edges                 WorkoutExerciseSetEdges `json:"edges"`
	workout_exercise_sets *int
	selectValues          sql.SelectValues
}

// WorkoutExerciseSetEdges holds the relations/edges for other nodes in the graph.
type WorkoutExerciseSetEdges struct {
	// WorkoutExercise holds the value of the workout_exercise edge.
	WorkoutExercise *WorkoutExercise `json:"workout_exercise,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkoutExerciseOrErr returns the WorkoutExercise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkoutExerciseSetEdges) WorkoutExerciseOrErr() (*WorkoutExercise, error) {
	if e.WorkoutExercise != nil {
		return e.WorkoutExercise, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workoutexercise.Label}
	}
	return nil, &NotLoadedError{edge: "workout_exercise"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkoutExerciseSet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workoutexerciseset.FieldWeight, workoutexerciseset.FieldReps:
			values[i] = new(sql.NullInt64)
		case workoutexerciseset.FieldCreatedAt, workoutexerciseset.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workoutexerciseset.FieldID:
			values[i] = new(uuid.UUID)
		case workoutexerciseset.ForeignKeys[0]: // workout_exercise_sets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkoutExerciseSet fields.
func (wes *WorkoutExerciseSet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workoutexerciseset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wes.ID = *value
			}
		case workoutexerciseset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wes.CreatedAt = value.Time
			}
		case workoutexerciseset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wes.UpdatedAt = value.Time
			}
		case workoutexerciseset.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				wes.Weight = int(value.Int64)
			}
		case workoutexerciseset.FieldReps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reps", values[i])
			} else if value.Valid {
				wes.Reps = int(value.Int64)
			}
		case workoutexerciseset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workout_exercise_sets", value)
			} else if value.Valid {
				wes.workout_exercise_sets = new(int)
				*wes.workout_exercise_sets = int(value.Int64)
			}
		default:
			wes.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkoutExerciseSet.
// This includes values selected through modifiers, order, etc.
func (wes *WorkoutExerciseSet) Value(name string) (ent.Value, error) {
	return wes.selectValues.Get(name)
}

// QueryWorkoutExercise queries the "workout_exercise" edge of the WorkoutExerciseSet entity.
func (wes *WorkoutExerciseSet) QueryWorkoutExercise() *WorkoutExerciseQuery {
	return NewWorkoutExerciseSetClient(wes.config).QueryWorkoutExercise(wes)
}

// Update returns a builder for updating this WorkoutExerciseSet.
// Note that you need to call WorkoutExerciseSet.Unwrap() before calling this method if this WorkoutExerciseSet
// was returned from a transaction, and the transaction was committed or rolled back.
func (wes *WorkoutExerciseSet) Update() *WorkoutExerciseSetUpdateOne {
	return NewWorkoutExerciseSetClient(wes.config).UpdateOne(wes)
}

// Unwrap unwraps the WorkoutExerciseSet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wes *WorkoutExerciseSet) Unwrap() *WorkoutExerciseSet {
	_tx, ok := wes.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkoutExerciseSet is not a transactional entity")
	}
	wes.config.driver = _tx.drv
	return wes
}

// String implements the fmt.Stringer.
func (wes *WorkoutExerciseSet) String() string {
	var builder strings.Builder
	builder.WriteString("WorkoutExerciseSet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wes.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wes.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wes.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", wes.Weight))
	builder.WriteString(", ")
	builder.WriteString("reps=")
	builder.WriteString(fmt.Sprintf("%v", wes.Reps))
	builder.WriteByte(')')
	return builder.String()
}

// WorkoutExerciseSets is a parsable slice of WorkoutExerciseSet.
type WorkoutExerciseSets []*WorkoutExerciseSet
