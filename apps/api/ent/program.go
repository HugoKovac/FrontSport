// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/program"
	"GoNext/base/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Program is the model entity for the Program schema.
type Program struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProgramQuery when eager-loading is set.
	Edges        ProgramEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProgramEdges holds the relations/edges for other nodes in the graph.
type ProgramEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Exercises holds the value of the exercises edge.
	Exercises []*Exercise `json:"exercises,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProgramEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ExercisesOrErr returns the Exercises value or an error if the edge
// was not loaded in eager-loading.
func (e ProgramEdges) ExercisesOrErr() ([]*Exercise, error) {
	if e.loadedTypes[1] {
		return e.Exercises, nil
	}
	return nil, &NotLoadedError{edge: "exercises"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Program) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case program.FieldID:
			values[i] = new(sql.NullInt64)
		case program.FieldName:
			values[i] = new(sql.NullString)
		case program.FieldCreatedAt, program.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case program.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Program fields.
func (pr *Program) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case program.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case program.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case program.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case program.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case program.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				pr.UserID = *value
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Program.
// This includes values selected through modifiers, order, etc.
func (pr *Program) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Program entity.
func (pr *Program) QueryUser() *UserQuery {
	return NewProgramClient(pr.config).QueryUser(pr)
}

// QueryExercises queries the "exercises" edge of the Program entity.
func (pr *Program) QueryExercises() *ExerciseQuery {
	return NewProgramClient(pr.config).QueryExercises(pr)
}

// Update returns a builder for updating this Program.
// Note that you need to call Program.Unwrap() before calling this method if this Program
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Program) Update() *ProgramUpdateOne {
	return NewProgramClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Program entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Program) Unwrap() *Program {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Program is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Program) String() string {
	var builder strings.Builder
	builder.WriteString("Program(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Programs is a parsable slice of Program.
type Programs []*Program
