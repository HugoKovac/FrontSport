// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/predicate"
	"GoNext/base/ent/workoutexerciseset"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkoutExerciseSetDelete is the builder for deleting a WorkoutExerciseSet entity.
type WorkoutExerciseSetDelete struct {
	config
	hooks    []Hook
	mutation *WorkoutExerciseSetMutation
}

// Where appends a list predicates to the WorkoutExerciseSetDelete builder.
func (wesd *WorkoutExerciseSetDelete) Where(ps ...predicate.WorkoutExerciseSet) *WorkoutExerciseSetDelete {
	wesd.mutation.Where(ps...)
	return wesd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wesd *WorkoutExerciseSetDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wesd.sqlExec, wesd.mutation, wesd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wesd *WorkoutExerciseSetDelete) ExecX(ctx context.Context) int {
	n, err := wesd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wesd *WorkoutExerciseSetDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workoutexerciseset.Table, sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID))
	if ps := wesd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wesd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wesd.mutation.done = true
	return affected, err
}

// WorkoutExerciseSetDeleteOne is the builder for deleting a single WorkoutExerciseSet entity.
type WorkoutExerciseSetDeleteOne struct {
	wesd *WorkoutExerciseSetDelete
}

// Where appends a list predicates to the WorkoutExerciseSetDelete builder.
func (wesdo *WorkoutExerciseSetDeleteOne) Where(ps ...predicate.WorkoutExerciseSet) *WorkoutExerciseSetDeleteOne {
	wesdo.wesd.mutation.Where(ps...)
	return wesdo
}

// Exec executes the deletion query.
func (wesdo *WorkoutExerciseSetDeleteOne) Exec(ctx context.Context) error {
	n, err := wesdo.wesd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workoutexerciseset.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wesdo *WorkoutExerciseSetDeleteOne) ExecX(ctx context.Context) {
	if err := wesdo.Exec(ctx); err != nil {
		panic(err)
	}
}
