// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/workoutexercise"
	"GoNext/base/ent/workoutexerciseset"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutExerciseSetCreate is the builder for creating a WorkoutExerciseSet entity.
type WorkoutExerciseSetCreate struct {
	config
	mutation *WorkoutExerciseSetMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wesc *WorkoutExerciseSetCreate) SetCreatedAt(t time.Time) *WorkoutExerciseSetCreate {
	wesc.mutation.SetCreatedAt(t)
	return wesc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableCreatedAt(t *time.Time) *WorkoutExerciseSetCreate {
	if t != nil {
		wesc.SetCreatedAt(*t)
	}
	return wesc
}

// SetUpdatedAt sets the "updated_at" field.
func (wesc *WorkoutExerciseSetCreate) SetUpdatedAt(t time.Time) *WorkoutExerciseSetCreate {
	wesc.mutation.SetUpdatedAt(t)
	return wesc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableUpdatedAt(t *time.Time) *WorkoutExerciseSetCreate {
	if t != nil {
		wesc.SetUpdatedAt(*t)
	}
	return wesc
}

// SetWeight sets the "weight" field.
func (wesc *WorkoutExerciseSetCreate) SetWeight(i int) *WorkoutExerciseSetCreate {
	wesc.mutation.SetWeight(i)
	return wesc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableWeight(i *int) *WorkoutExerciseSetCreate {
	if i != nil {
		wesc.SetWeight(*i)
	}
	return wesc
}

// SetReps sets the "reps" field.
func (wesc *WorkoutExerciseSetCreate) SetReps(i int) *WorkoutExerciseSetCreate {
	wesc.mutation.SetReps(i)
	return wesc
}

// SetNillableReps sets the "reps" field if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableReps(i *int) *WorkoutExerciseSetCreate {
	if i != nil {
		wesc.SetReps(*i)
	}
	return wesc
}

// SetID sets the "id" field.
func (wesc *WorkoutExerciseSetCreate) SetID(u uuid.UUID) *WorkoutExerciseSetCreate {
	wesc.mutation.SetID(u)
	return wesc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableID(u *uuid.UUID) *WorkoutExerciseSetCreate {
	if u != nil {
		wesc.SetID(*u)
	}
	return wesc
}

// SetWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID.
func (wesc *WorkoutExerciseSetCreate) SetWorkoutExerciseID(id int) *WorkoutExerciseSetCreate {
	wesc.mutation.SetWorkoutExerciseID(id)
	return wesc
}

// SetNillableWorkoutExerciseID sets the "workout_exercise" edge to the WorkoutExercise entity by ID if the given value is not nil.
func (wesc *WorkoutExerciseSetCreate) SetNillableWorkoutExerciseID(id *int) *WorkoutExerciseSetCreate {
	if id != nil {
		wesc = wesc.SetWorkoutExerciseID(*id)
	}
	return wesc
}

// SetWorkoutExercise sets the "workout_exercise" edge to the WorkoutExercise entity.
func (wesc *WorkoutExerciseSetCreate) SetWorkoutExercise(w *WorkoutExercise) *WorkoutExerciseSetCreate {
	return wesc.SetWorkoutExerciseID(w.ID)
}

// Mutation returns the WorkoutExerciseSetMutation object of the builder.
func (wesc *WorkoutExerciseSetCreate) Mutation() *WorkoutExerciseSetMutation {
	return wesc.mutation
}

// Save creates the WorkoutExerciseSet in the database.
func (wesc *WorkoutExerciseSetCreate) Save(ctx context.Context) (*WorkoutExerciseSet, error) {
	wesc.defaults()
	return withHooks(ctx, wesc.sqlSave, wesc.mutation, wesc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wesc *WorkoutExerciseSetCreate) SaveX(ctx context.Context) *WorkoutExerciseSet {
	v, err := wesc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wesc *WorkoutExerciseSetCreate) Exec(ctx context.Context) error {
	_, err := wesc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wesc *WorkoutExerciseSetCreate) ExecX(ctx context.Context) {
	if err := wesc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wesc *WorkoutExerciseSetCreate) defaults() {
	if _, ok := wesc.mutation.CreatedAt(); !ok {
		v := workoutexerciseset.DefaultCreatedAt()
		wesc.mutation.SetCreatedAt(v)
	}
	if _, ok := wesc.mutation.UpdatedAt(); !ok {
		v := workoutexerciseset.DefaultUpdatedAt()
		wesc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wesc.mutation.Weight(); !ok {
		v := workoutexerciseset.DefaultWeight
		wesc.mutation.SetWeight(v)
	}
	if _, ok := wesc.mutation.Reps(); !ok {
		v := workoutexerciseset.DefaultReps
		wesc.mutation.SetReps(v)
	}
	if _, ok := wesc.mutation.ID(); !ok {
		v := workoutexerciseset.DefaultID()
		wesc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wesc *WorkoutExerciseSetCreate) check() error {
	if _, ok := wesc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkoutExerciseSet.created_at"`)}
	}
	if _, ok := wesc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkoutExerciseSet.updated_at"`)}
	}
	if _, ok := wesc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "WorkoutExerciseSet.weight"`)}
	}
	if _, ok := wesc.mutation.Reps(); !ok {
		return &ValidationError{Name: "reps", err: errors.New(`ent: missing required field "WorkoutExerciseSet.reps"`)}
	}
	return nil
}

func (wesc *WorkoutExerciseSetCreate) sqlSave(ctx context.Context) (*WorkoutExerciseSet, error) {
	if err := wesc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wesc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wesc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wesc.mutation.id = &_node.ID
	wesc.mutation.done = true
	return _node, nil
}

func (wesc *WorkoutExerciseSetCreate) createSpec() (*WorkoutExerciseSet, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkoutExerciseSet{config: wesc.config}
		_spec = sqlgraph.NewCreateSpec(workoutexerciseset.Table, sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID))
	)
	if id, ok := wesc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wesc.mutation.CreatedAt(); ok {
		_spec.SetField(workoutexerciseset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wesc.mutation.UpdatedAt(); ok {
		_spec.SetField(workoutexerciseset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wesc.mutation.Weight(); ok {
		_spec.SetField(workoutexerciseset.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := wesc.mutation.Reps(); ok {
		_spec.SetField(workoutexerciseset.FieldReps, field.TypeInt, value)
		_node.Reps = value
	}
	if nodes := wesc.mutation.WorkoutExerciseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workoutexerciseset.WorkoutExerciseTable,
			Columns: []string{workoutexerciseset.WorkoutExerciseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workoutexercise.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workout_exercise_sets = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkoutExerciseSetCreateBulk is the builder for creating many WorkoutExerciseSet entities in bulk.
type WorkoutExerciseSetCreateBulk struct {
	config
	err      error
	builders []*WorkoutExerciseSetCreate
}

// Save creates the WorkoutExerciseSet entities in the database.
func (wescb *WorkoutExerciseSetCreateBulk) Save(ctx context.Context) ([]*WorkoutExerciseSet, error) {
	if wescb.err != nil {
		return nil, wescb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wescb.builders))
	nodes := make([]*WorkoutExerciseSet, len(wescb.builders))
	mutators := make([]Mutator, len(wescb.builders))
	for i := range wescb.builders {
		func(i int, root context.Context) {
			builder := wescb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkoutExerciseSetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wescb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wescb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wescb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wescb *WorkoutExerciseSetCreateBulk) SaveX(ctx context.Context) []*WorkoutExerciseSet {
	v, err := wescb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wescb *WorkoutExerciseSetCreateBulk) Exec(ctx context.Context) error {
	_, err := wescb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wescb *WorkoutExerciseSetCreateBulk) ExecX(ctx context.Context) {
	if err := wescb.Exec(ctx); err != nil {
		panic(err)
	}
}
