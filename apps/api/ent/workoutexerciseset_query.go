// Code generated by ent, DO NOT EDIT.

package ent

import (
	"GoNext/base/ent/predicate"
	"GoNext/base/ent/workoutexercise"
	"GoNext/base/ent/workoutexerciseset"
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkoutExerciseSetQuery is the builder for querying WorkoutExerciseSet entities.
type WorkoutExerciseSetQuery struct {
	config
	ctx                 *QueryContext
	order               []workoutexerciseset.OrderOption
	inters              []Interceptor
	predicates          []predicate.WorkoutExerciseSet
	withWorkoutExercise *WorkoutExerciseQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkoutExerciseSetQuery builder.
func (wesq *WorkoutExerciseSetQuery) Where(ps ...predicate.WorkoutExerciseSet) *WorkoutExerciseSetQuery {
	wesq.predicates = append(wesq.predicates, ps...)
	return wesq
}

// Limit the number of records to be returned by this query.
func (wesq *WorkoutExerciseSetQuery) Limit(limit int) *WorkoutExerciseSetQuery {
	wesq.ctx.Limit = &limit
	return wesq
}

// Offset to start from.
func (wesq *WorkoutExerciseSetQuery) Offset(offset int) *WorkoutExerciseSetQuery {
	wesq.ctx.Offset = &offset
	return wesq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wesq *WorkoutExerciseSetQuery) Unique(unique bool) *WorkoutExerciseSetQuery {
	wesq.ctx.Unique = &unique
	return wesq
}

// Order specifies how the records should be ordered.
func (wesq *WorkoutExerciseSetQuery) Order(o ...workoutexerciseset.OrderOption) *WorkoutExerciseSetQuery {
	wesq.order = append(wesq.order, o...)
	return wesq
}

// QueryWorkoutExercise chains the current query on the "workout_exercise" edge.
func (wesq *WorkoutExerciseSetQuery) QueryWorkoutExercise() *WorkoutExerciseQuery {
	query := (&WorkoutExerciseClient{config: wesq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wesq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wesq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workoutexerciseset.Table, workoutexerciseset.FieldID, selector),
			sqlgraph.To(workoutexercise.Table, workoutexercise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workoutexerciseset.WorkoutExerciseTable, workoutexerciseset.WorkoutExerciseColumn),
		)
		fromU = sqlgraph.SetNeighbors(wesq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkoutExerciseSet entity from the query.
// Returns a *NotFoundError when no WorkoutExerciseSet was found.
func (wesq *WorkoutExerciseSetQuery) First(ctx context.Context) (*WorkoutExerciseSet, error) {
	nodes, err := wesq.Limit(1).All(setContextOp(ctx, wesq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workoutexerciseset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) FirstX(ctx context.Context) *WorkoutExerciseSet {
	node, err := wesq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkoutExerciseSet ID from the query.
// Returns a *NotFoundError when no WorkoutExerciseSet ID was found.
func (wesq *WorkoutExerciseSetQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wesq.Limit(1).IDs(setContextOp(ctx, wesq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workoutexerciseset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wesq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkoutExerciseSet entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkoutExerciseSet entity is found.
// Returns a *NotFoundError when no WorkoutExerciseSet entities are found.
func (wesq *WorkoutExerciseSetQuery) Only(ctx context.Context) (*WorkoutExerciseSet, error) {
	nodes, err := wesq.Limit(2).All(setContextOp(ctx, wesq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workoutexerciseset.Label}
	default:
		return nil, &NotSingularError{workoutexerciseset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) OnlyX(ctx context.Context) *WorkoutExerciseSet {
	node, err := wesq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkoutExerciseSet ID in the query.
// Returns a *NotSingularError when more than one WorkoutExerciseSet ID is found.
// Returns a *NotFoundError when no entities are found.
func (wesq *WorkoutExerciseSetQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wesq.Limit(2).IDs(setContextOp(ctx, wesq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workoutexerciseset.Label}
	default:
		err = &NotSingularError{workoutexerciseset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wesq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkoutExerciseSets.
func (wesq *WorkoutExerciseSetQuery) All(ctx context.Context) ([]*WorkoutExerciseSet, error) {
	ctx = setContextOp(ctx, wesq.ctx, ent.OpQueryAll)
	if err := wesq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkoutExerciseSet, *WorkoutExerciseSetQuery]()
	return withInterceptors[[]*WorkoutExerciseSet](ctx, wesq, qr, wesq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) AllX(ctx context.Context) []*WorkoutExerciseSet {
	nodes, err := wesq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkoutExerciseSet IDs.
func (wesq *WorkoutExerciseSetQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wesq.ctx.Unique == nil && wesq.path != nil {
		wesq.Unique(true)
	}
	ctx = setContextOp(ctx, wesq.ctx, ent.OpQueryIDs)
	if err = wesq.Select(workoutexerciseset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wesq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wesq *WorkoutExerciseSetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wesq.ctx, ent.OpQueryCount)
	if err := wesq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wesq, querierCount[*WorkoutExerciseSetQuery](), wesq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) CountX(ctx context.Context) int {
	count, err := wesq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wesq *WorkoutExerciseSetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wesq.ctx, ent.OpQueryExist)
	switch _, err := wesq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wesq *WorkoutExerciseSetQuery) ExistX(ctx context.Context) bool {
	exist, err := wesq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkoutExerciseSetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wesq *WorkoutExerciseSetQuery) Clone() *WorkoutExerciseSetQuery {
	if wesq == nil {
		return nil
	}
	return &WorkoutExerciseSetQuery{
		config:              wesq.config,
		ctx:                 wesq.ctx.Clone(),
		order:               append([]workoutexerciseset.OrderOption{}, wesq.order...),
		inters:              append([]Interceptor{}, wesq.inters...),
		predicates:          append([]predicate.WorkoutExerciseSet{}, wesq.predicates...),
		withWorkoutExercise: wesq.withWorkoutExercise.Clone(),
		// clone intermediate query.
		sql:  wesq.sql.Clone(),
		path: wesq.path,
	}
}

// WithWorkoutExercise tells the query-builder to eager-load the nodes that are connected to
// the "workout_exercise" edge. The optional arguments are used to configure the query builder of the edge.
func (wesq *WorkoutExerciseSetQuery) WithWorkoutExercise(opts ...func(*WorkoutExerciseQuery)) *WorkoutExerciseSetQuery {
	query := (&WorkoutExerciseClient{config: wesq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wesq.withWorkoutExercise = query
	return wesq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkoutExerciseSet.Query().
//		GroupBy(workoutexerciseset.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wesq *WorkoutExerciseSetQuery) GroupBy(field string, fields ...string) *WorkoutExerciseSetGroupBy {
	wesq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkoutExerciseSetGroupBy{build: wesq}
	grbuild.flds = &wesq.ctx.Fields
	grbuild.label = workoutexerciseset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkoutExerciseSet.Query().
//		Select(workoutexerciseset.FieldCreatedAt).
//		Scan(ctx, &v)
func (wesq *WorkoutExerciseSetQuery) Select(fields ...string) *WorkoutExerciseSetSelect {
	wesq.ctx.Fields = append(wesq.ctx.Fields, fields...)
	sbuild := &WorkoutExerciseSetSelect{WorkoutExerciseSetQuery: wesq}
	sbuild.label = workoutexerciseset.Label
	sbuild.flds, sbuild.scan = &wesq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkoutExerciseSetSelect configured with the given aggregations.
func (wesq *WorkoutExerciseSetQuery) Aggregate(fns ...AggregateFunc) *WorkoutExerciseSetSelect {
	return wesq.Select().Aggregate(fns...)
}

func (wesq *WorkoutExerciseSetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wesq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wesq); err != nil {
				return err
			}
		}
	}
	for _, f := range wesq.ctx.Fields {
		if !workoutexerciseset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wesq.path != nil {
		prev, err := wesq.path(ctx)
		if err != nil {
			return err
		}
		wesq.sql = prev
	}
	return nil
}

func (wesq *WorkoutExerciseSetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkoutExerciseSet, error) {
	var (
		nodes       = []*WorkoutExerciseSet{}
		withFKs     = wesq.withFKs
		_spec       = wesq.querySpec()
		loadedTypes = [1]bool{
			wesq.withWorkoutExercise != nil,
		}
	)
	if wesq.withWorkoutExercise != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workoutexerciseset.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkoutExerciseSet).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkoutExerciseSet{config: wesq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wesq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wesq.withWorkoutExercise; query != nil {
		if err := wesq.loadWorkoutExercise(ctx, query, nodes, nil,
			func(n *WorkoutExerciseSet, e *WorkoutExercise) { n.Edges.WorkoutExercise = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wesq *WorkoutExerciseSetQuery) loadWorkoutExercise(ctx context.Context, query *WorkoutExerciseQuery, nodes []*WorkoutExerciseSet, init func(*WorkoutExerciseSet), assign func(*WorkoutExerciseSet, *WorkoutExercise)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WorkoutExerciseSet)
	for i := range nodes {
		if nodes[i].workout_exercise_sets == nil {
			continue
		}
		fk := *nodes[i].workout_exercise_sets
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workoutexercise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workout_exercise_sets" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wesq *WorkoutExerciseSetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wesq.querySpec()
	_spec.Node.Columns = wesq.ctx.Fields
	if len(wesq.ctx.Fields) > 0 {
		_spec.Unique = wesq.ctx.Unique != nil && *wesq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wesq.driver, _spec)
}

func (wesq *WorkoutExerciseSetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workoutexerciseset.Table, workoutexerciseset.Columns, sqlgraph.NewFieldSpec(workoutexerciseset.FieldID, field.TypeUUID))
	_spec.From = wesq.sql
	if unique := wesq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wesq.path != nil {
		_spec.Unique = true
	}
	if fields := wesq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workoutexerciseset.FieldID)
		for i := range fields {
			if fields[i] != workoutexerciseset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wesq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wesq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wesq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wesq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wesq *WorkoutExerciseSetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wesq.driver.Dialect())
	t1 := builder.Table(workoutexerciseset.Table)
	columns := wesq.ctx.Fields
	if len(columns) == 0 {
		columns = workoutexerciseset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wesq.sql != nil {
		selector = wesq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wesq.ctx.Unique != nil && *wesq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wesq.predicates {
		p(selector)
	}
	for _, p := range wesq.order {
		p(selector)
	}
	if offset := wesq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wesq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkoutExerciseSetGroupBy is the group-by builder for WorkoutExerciseSet entities.
type WorkoutExerciseSetGroupBy struct {
	selector
	build *WorkoutExerciseSetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wesgb *WorkoutExerciseSetGroupBy) Aggregate(fns ...AggregateFunc) *WorkoutExerciseSetGroupBy {
	wesgb.fns = append(wesgb.fns, fns...)
	return wesgb
}

// Scan applies the selector query and scans the result into the given value.
func (wesgb *WorkoutExerciseSetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wesgb.build.ctx, ent.OpQueryGroupBy)
	if err := wesgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkoutExerciseSetQuery, *WorkoutExerciseSetGroupBy](ctx, wesgb.build, wesgb, wesgb.build.inters, v)
}

func (wesgb *WorkoutExerciseSetGroupBy) sqlScan(ctx context.Context, root *WorkoutExerciseSetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wesgb.fns))
	for _, fn := range wesgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wesgb.flds)+len(wesgb.fns))
		for _, f := range *wesgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wesgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wesgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkoutExerciseSetSelect is the builder for selecting fields of WorkoutExerciseSet entities.
type WorkoutExerciseSetSelect struct {
	*WorkoutExerciseSetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wess *WorkoutExerciseSetSelect) Aggregate(fns ...AggregateFunc) *WorkoutExerciseSetSelect {
	wess.fns = append(wess.fns, fns...)
	return wess
}

// Scan applies the selector query and scans the result into the given value.
func (wess *WorkoutExerciseSetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wess.ctx, ent.OpQuerySelect)
	if err := wess.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkoutExerciseSetQuery, *WorkoutExerciseSetSelect](ctx, wess.WorkoutExerciseSetQuery, wess, wess.inters, v)
}

func (wess *WorkoutExerciseSetSelect) sqlScan(ctx context.Context, root *WorkoutExerciseSetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wess.fns))
	for _, fn := range wess.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wess.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
