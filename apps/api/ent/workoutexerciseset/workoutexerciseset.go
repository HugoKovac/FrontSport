// Code generated by ent, DO NOT EDIT.

package workoutexerciseset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the workoutexerciseset type in the database.
	Label = "workout_exercise_set"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldReps holds the string denoting the reps field in the database.
	FieldReps = "reps"
	// EdgeWorkoutExercise holds the string denoting the workout_exercise edge name in mutations.
	EdgeWorkoutExercise = "workout_exercise"
	// Table holds the table name of the workoutexerciseset in the database.
	Table = "workout_exercise_sets"
	// WorkoutExerciseTable is the table that holds the workout_exercise relation/edge.
	WorkoutExerciseTable = "workout_exercise_sets"
	// WorkoutExerciseInverseTable is the table name for the WorkoutExercise entity.
	// It exists in this package in order to avoid circular dependency with the "workoutexercise" package.
	WorkoutExerciseInverseTable = "workout_exercises"
	// WorkoutExerciseColumn is the table column denoting the workout_exercise relation/edge.
	WorkoutExerciseColumn = "workout_exercise_sets"
)

// Columns holds all SQL columns for workoutexerciseset fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldWeight,
	FieldReps,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workout_exercise_sets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workout_exercise_sets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultWeight holds the default value on creation for the "weight" field.
	DefaultWeight int
	// DefaultReps holds the default value on creation for the "reps" field.
	DefaultReps int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the WorkoutExerciseSet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByReps orders the results by the reps field.
func ByReps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReps, opts...).ToFunc()
}

// ByWorkoutExerciseField orders the results by workout_exercise field.
func ByWorkoutExerciseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkoutExerciseStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkoutExerciseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkoutExerciseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkoutExerciseTable, WorkoutExerciseColumn),
	)
}
